#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t mutex[NUM_PHILOSOPHERS];

void* philosopher(void* num) {
    int id = *((int*)num);
    
    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
        
        pthread_mutex_lock(&mutex[id]);
        pthread_mutex_lock(&mutex[(id + 1) % NUM_PHILOSOPHERS]);
        
        printf("Philosopher %d is eating.\n", id);
        sleep(2);
        
        pthread_mutex_unlock(&mutex[(id + 1) % NUM_PHILOSOPHERS]);
        pthread_mutex_unlock(&mutex[id]);
    }
    
    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&mutex[i], NULL);
        philosopher_ids[i] = i;
        pthread_create(&threads[i], NULL, philosopher, (void*)&philosopher_ids[i]);
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&mutex[i]);
    }
    
    return 0;
}
