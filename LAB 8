#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int bt;  // Burst time
    int at;  // Arrival time
    int ct;  // Completion time
    int tat; // Turnaround time
    int wt;  // Waiting time
    int remaining_bt; // Remaining burst time
};

void round_robin(struct Process p[], int n, int tq);

int main() {
    int n, tq;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Dynamically allocate memory for processes
    struct Process *p = (struct Process *)malloc(n * sizeof(struct Process));
    
    // Input burst time, arrival time for each process
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("\nEnter Burst time and Arrival time for Process %d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        p[i].remaining_bt = p[i].bt;
        p[i].ct = 0;  // Initialize Completion time
        p[i].tat = 0; // Initialize Turnaround time
        p[i].wt = 0;  // Initialize Waiting time
    }

    // Input time quantum
    printf("Enter time quantum: ");
    scanf("%d", &tq);

    // Call Round Robin scheduling function
    round_robin(p, n, tq);

    // Display the result
    printf("\nProcess ID\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].id, p[i].bt, p[i].at, p[i].ct, p[i].tat, p[i].wt);
    }

    // Free the dynamically allocated memory
    free(p);

    return 0;
}

void round_robin(struct Process p[], int n, int tq) {
    int time = 0, completed = 0;
    int remaining_processes = n;

    // Execute Round Robin scheduling
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            // Check if the process is ready (remaining burst time > 0 and arrival time <= current time)
            if (p[i].remaining_bt > 0 && p[i].at <= time) {
                if (p[i].remaining_bt > tq) {
                    time += tq;
                    p[i].remaining_bt -= tq;
                } else {
                    time += p[i].remaining_bt;
                    p[i].remaining_bt = 0;
                    p[i].ct = time; // Completion time
                    p[i].tat = p[i].ct - p[i].at; // Turnaround time
                    p[i].wt = p[i].tat - p[i].bt; // Waiting time
                    completed++; // One process has finished
                }
            }
        }
        // Handle case where no process is ready to execute
        int all_done = 1;
        for (int i = 0; i < n; i++) {
            if (p[i].remaining_bt > 0) {
                all_done = 0;
                break;
            }
        }
        if (all_done) break;
    }
}
