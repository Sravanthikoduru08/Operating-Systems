#include <stdio.h>

struct Process {
    int id;
    int bt;  // Burst time
    int at;  // Arrival time
    int ct;  // Completion time
    int tat; // Turnaround time
    int wt;  // Waiting time
};

void sjf_scheduling(struct Process p[], int n);

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    for(int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter Burst time and Arrival time for Process %d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
    }

    sjf_scheduling(p, n);

    printf("\nProcess ID\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for(int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].id, p[i].bt, p[i].at, p[i].ct, p[i].tat, p[i].wt);
    }

    return 0;
}

void sjf_scheduling(struct Process p[], int n) {
    int time = 0, completed = 0, min_bt, index;
    int remaining_bt[n];

    for (int i = 0; i < n; i++) {
        remaining_bt[i] = p[i].bt;
    }

    while (completed < n) {
        min_bt = 9999;
        index = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && remaining_bt[i] > 0 && p[i].bt < min_bt) {
                min_bt = p[i].bt;
                index = i;
            }
        }

        if (index != -1) {
            remaining_bt[index] = 0;
            p[index].ct = time + p[index].bt;
            p[index].tat = p[index].ct - p[index].at;
            p[index].wt = p[index].tat - p[index].bt;
            completed++;
        }

        time++;
    }
}
